import java.util.stream.Collectors

plugins {
    id 'java'
    id 'maven-publish'
    id 'java-library'
}

group 'de.nocoffeetech'
version '0.1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

ext {
    javaMainClass = "de.nocoffeetech.webservices.launcher.Launcher"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { //for brigadier
        url "https://libraries.minecraft.net"
    }
}

sourceSets {
    launcher {
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

compileJava {
    doFirst {
        options.compilerArgs += [
                '--module-path', classpath.asPath
        ]
        classpath = files()
    }
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'org.apache.logging.log4j') {
            details.useVersion "2.19.0"
        }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    api group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.19.0'
    runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.19.0'
    api group: 'com.google.code.gson', name: 'gson', version: '2.10'
    api project(":")

    implementation 'net.minecrell:terminalconsoleappender:1.3.0'
    api 'com.mojang:brigadier:1.0.18'

    runtimeOnly group: 'com.aayushatharva.brotli4j', name: 'native-linux-x86_64', version: '1.9.0'
    implementation group: 'com.aayushatharva.brotli4j', name: 'brotli4j', version: '1.9.0'
}

test {
    useJUnitPlatform()
}

task copyDeps(type: Copy) {
    from(sourceSets.main.runtimeClasspath)
    include('*.jar')
    includeEmptyDirs = false
    into('build/deps/')
}

jar.dependsOn(copyDeps)

task launcherJar(type: Jar) {
    from(sourceSets.launcher.output)
    archiveFileName = 'webservices-launcher.jar'
    manifest {
        attributes("Main-Class": javaMainClass)
    }
}

task run(type: JavaExec) {
    classpath = sourceSets.launcher.runtimeClasspath
    mainClass = javaMainClass
    jvmArgs = ["-Dwebservices.dev=true", "-Dwebservices.launcher.additional_modules=" + sourceSets.main.runtimeClasspath.toList().stream().map(Object::toString).collect(Collectors.joining(File.pathSeparator))]
}

build.dependsOn(launcherJar)

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task launcherSourceJar(type: Jar) {
    from sourceSets.launcher.allJava
}

publishing {
    publications {
        launcher(MavenPublication) {
            artifact launcherJar {
                artifactId "webservices-launcher"
            }
            artifact launcherSourceJar {
                artifactId "webservices-launcher"
                classifier "sources"
            }
        }
        services(MavenPublication) {
            from components.java
            artifact sourceJar {
                artifactId "webservices-core"
                classifier "sources"
            }
        }
    }
}

